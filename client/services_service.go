// DO NOT EDIT THIS FILE. This file will be overwritten when re-running go-raml.
package client

import (
	"encoding/json"
	"net/http"

	"github.com/openvcloud/ovc-controller-manager/client/goraml"
	"github.com/openvcloud/ovc-controller-manager/client/types"
)

type ServicesService service

// List all the possible action a service can do.
func (s *ServicesService) ListActions(service_guid string, headers, queryParams map[string]interface{}) ([]types.Action, *http.Response, error) {
	var err error
	var respBody200 []types.Action

	resp, err := s.client.doReqNoBody("GET", s.client.BaseURI+"/services/"+service_guid+"/actions", headers, queryParams)
	if err != nil {
		return respBody200, nil, err
	}
	defer resp.Body.Close()

	switch resp.StatusCode {
	case 200:
		err = json.NewDecoder(resp.Body).Decode(&respBody200)
	default:
		err = goraml.NewAPIError(resp, nil)
	}

	return respBody200, resp, err
}

// Retrieve the detail of a task
func (s *ServicesService) GetTask(task_guid, service_guid string, headers, queryParams map[string]interface{}) (types.Task, *http.Response, error) {
	var err error
	var respBody200 types.Task

	resp, err := s.client.doReqNoBody("GET", s.client.BaseURI+"/services/"+service_guid+"/task_list/"+task_guid, headers, queryParams)
	if err != nil {
		return respBody200, nil, err
	}
	defer resp.Body.Close()

	switch resp.StatusCode {
	case 200:
		err = json.NewDecoder(resp.Body).Decode(&respBody200)
	case 404:
		var respBody404 types.Error
		err = goraml.NewAPIError(resp, &respBody404)
	default:
		err = goraml.NewAPIError(resp, nil)
	}

	return respBody200, resp, err
}

// Return all the action in the task list
func (s *ServicesService) GetTaskList(service_guid string, headers, queryParams map[string]interface{}) ([]types.Task, *http.Response, error) {
	var err error
	var respBody200 []types.Task

	resp, err := s.client.doReqNoBody("GET", s.client.BaseURI+"/services/"+service_guid+"/task_list", headers, queryParams)
	if err != nil {
		return respBody200, nil, err
	}
	defer resp.Body.Close()

	switch resp.StatusCode {
	case 200:
		err = json.NewDecoder(resp.Body).Decode(&respBody200)
	default:
		err = goraml.NewAPIError(resp, nil)
	}

	return respBody200, resp, err
}

// Add a task to the task list
func (s *ServicesService) AddTaskToList(service_guid string, body types.TaskCreate, headers, queryParams map[string]interface{}) (types.Task, *http.Response, error) {
	var err error
	var respBody201 types.Task

	resp, err := s.client.doReqWithBody("POST", s.client.BaseURI+"/services/"+service_guid+"/task_list", &body, headers, queryParams)
	if err != nil {
		return respBody201, nil, err
	}
	defer resp.Body.Close()

	switch resp.StatusCode {
	case 201:
		err = json.NewDecoder(resp.Body).Decode(&respBody201)
	default:
		err = goraml.NewAPIError(resp, nil)
	}

	return respBody201, resp, err
}

// Delete a service
func (s *ServicesService) DeleteService(service_guid string, headers, queryParams map[string]interface{}) (*http.Response, error) {
	var err error

	resp, err := s.client.doReqNoBody("DELETE", s.client.BaseURI+"/services/"+service_guid, headers, queryParams)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	return resp, err
}

// Get the detail of a service
func (s *ServicesService) GetService(service_guid string, headers, queryParams map[string]interface{}) (types.Service, *http.Response, error) {
	var err error
	var respBody200 types.Service

	resp, err := s.client.doReqNoBody("GET", s.client.BaseURI+"/services/"+service_guid, headers, queryParams)
	if err != nil {
		return respBody200, nil, err
	}
	defer resp.Body.Close()

	switch resp.StatusCode {
	case 200:
		err = json.NewDecoder(resp.Body).Decode(&respBody200)
	case 404:
		var respBody404 types.Error
		err = goraml.NewAPIError(resp, &respBody404)
	default:
		err = goraml.NewAPIError(resp, nil)
	}

	return respBody200, resp, err
}

// Upgrade a service from one version to another
func (s *ServicesService) UpgradeService(service_guid string, body types.ServiceUpgradeRequest, headers, queryParams map[string]interface{}) (types.Service, *http.Response, error) {
	var err error
	var respBody200 types.Service

	resp, err := s.client.doReqWithBody("PUT", s.client.BaseURI+"/services/"+service_guid, &body, headers, queryParams)
	if err != nil {
		return respBody200, nil, err
	}
	defer resp.Body.Close()

	switch resp.StatusCode {
	case 200:
		err = json.NewDecoder(resp.Body).Decode(&respBody200)
	case 404:
		var respBody404 types.Error
		err = goraml.NewAPIError(resp, &respBody404)
	default:
		err = goraml.NewAPIError(resp, nil)
	}

	return respBody200, resp, err
}

// List all the services known by the ZeroRobot.
func (s *ServicesService) ListServices(headers, queryParams map[string]interface{}) ([]types.Service, *http.Response, error) {
	var err error
	var respBody200 []types.Service

	resp, err := s.client.doReqNoBody("GET", s.client.BaseURI+"/services", headers, queryParams)
	if err != nil {
		return respBody200, nil, err
	}
	defer resp.Body.Close()

	switch resp.StatusCode {
	case 200:
		err = json.NewDecoder(resp.Body).Decode(&respBody200)
	default:
		err = goraml.NewAPIError(resp, nil)
	}

	return respBody200, resp, err
}

// create a new service
func (s *ServicesService) CreateService(body types.ServiceCreate, headers, queryParams map[string]interface{}) (types.Service, *http.Response, error) {
	var err error
	var respBody201 types.Service

	resp, err := s.client.doReqWithBody("POST", s.client.BaseURI+"/services", &body, headers, queryParams)
	if err != nil {
		return respBody201, nil, err
	}
	defer resp.Body.Close()

	switch resp.StatusCode {
	case 201:
		err = json.NewDecoder(resp.Body).Decode(&respBody201)
	default:
		err = goraml.NewAPIError(resp, nil)
	}

	return respBody201, resp, err
}
